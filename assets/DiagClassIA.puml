@startuml

interface Joueur {
    + demanderAction(): Action
}

class JoueurHumain implements Joueur {
    + demanderAction(): Action
}

class JoueurIA implements Joueur {
    + demanderAction(): Action
}

class JoueurIACentralise extends JoueurIA {
    + demanderAction(): Action
}
class JoueurIANonCentralise extends JoueurIA {
    + demanderAction(): Action
}
class Algorithme{
    + solve(Probleme probleme) : Noeud
}
Probleme <-- "probleme" Algorithme
Etat <-- "etatInitial" Algorithme
Noeud <-- "frontiere / explored" Algorithme

class Action{
    + String nom
}

class Probleme{
    + Objectif final
    + estTerminal(Etat etat) : boolean
    + actions(Etat etat) : List<Action>
    + resultat(Etat etat, Action action) : Etat
    + cout(Etat etat, Action action) : int
}
Etat <-- "etatInitial" Probleme


class Etat{
    + <a completer pour les donnÃ©es du jeu>
    + estTerminal() : boolean
    + equals(Etat etat) : boolean
    + hashCode() : int
}

class Noeud{
    + int profondeur
    + int cout
}
Etat <-- "etat" Noeud
Action <-- "action" Noeud
Noeud <-- "parent" Noeud
@enduml